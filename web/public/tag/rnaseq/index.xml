<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RNAseq | Academic</title>
    <link>https://example.com/tag/rnaseq/</link>
      <atom:link href="https://example.com/tag/rnaseq/index.xml" rel="self" type="application/rss+xml" />
    <description>RNAseq</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 07 Jul 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>RNAseq</title>
      <link>https://example.com/tag/rnaseq/</link>
    </image>
    
    <item>
      <title>Loding different sequencing data into R</title>
      <link>https://example.com/post/load_seq_files/loadfile/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/load_seq_files/loadfile/</guid>
      <description>


&lt;div id=&#34;importing-bulk-rnaseq-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Importing Bulk RNAseq files&lt;/h2&gt;
&lt;p&gt;The most common file types that we will see for bulk RNAseq are &lt;strong&gt;count matrix&lt;/strong&gt; files ending in &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.csv&lt;/code&gt; or &lt;code&gt;.tsv&lt;/code&gt; or &lt;code&gt;.xls&lt;/code&gt;. They will all look the same after importing into the R, with a structure that each row represents a feature (a gene) and each column represents a sample. Note that usually the first row become the column name (aka header, noting each sample) and first column become the row name (noting each gene).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read .txt file
df1 &amp;lt;- read.table(file = &amp;quot;~/directory_of_your_file/your_file_name.txt&amp;quot;,
                  header = T, #set first row as header
                  row.names = 1) #set first column
# Read .tsv file
df1 &amp;lt;- read.delim(file = &amp;quot;~/directory_of_your_file/your_file_name.txt&amp;quot;,
                  header = T, #set first row as header
                  sep = &amp;quot;\t&amp;quot;, #for .tsv file
                  row.names = 1) #set first column

# Read .csv file
df1 &amp;lt;- read.delim(file = &amp;quot;~/directory_of_your_file/your_file_name.txt&amp;quot;,
                  header = T, #set first row as header
                  sep = &amp;quot;,&amp;quot;, #for .tsv file
                  row.names = 1) #set first column

# Read .xls file
df1 &amp;lt;- readxl::read_excel(path = &amp;quot;~/directory_of_your_file/your_file_name.txt&amp;quot;,
                          col_names = T)
#Actually I found Rstudio&amp;#39;s &amp;#39;Import Dataset&amp;#39; UI is quite useful.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;importing-scrnaseq-files-and-create-seurat-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Importing scRNAseq files and create Seurat object&lt;/h2&gt;
&lt;div id=&#34;type-1-filtered_feature_bc_matrix-files-from-standard-cellranger-output.&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Type 1: &lt;a href=&#34;https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices&#34;&gt;filtered_feature_bc_matrix&lt;/a&gt; files from standard &lt;em&gt;CellRanger&lt;/em&gt; output.&lt;/h4&gt;
&lt;p&gt;For each sample sent for scRNAseq, the standard &lt;em&gt;CellRanger&lt;/em&gt; pipeline will generate a &lt;strong&gt;filtered_feature_bc_matri&lt;/strong&gt; file which contains 3 files:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sample1_name_matrix.mtx(.gz)&lt;/code&gt;
&lt;code&gt;sample1_name_barcodes.tsv(.gz)&lt;/code&gt;
&lt;code&gt;sample1_name_genes.tsv(.gz)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will use the &lt;code&gt;ReadMtx()&lt;/code&gt; function to load these 3 files into a dgCMatrix file, and then create a Seurat file from it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Seurat)
#Read into a dgCMatrix file
sample1 &amp;lt;- ReadMtx(
  mtx=&amp;quot;~/you_file_directory/sample1_name_matrix.mtx.gz&amp;quot;,
  cells = &amp;quot;~/you_file_directory/sample1_name_barcodes.tsv.gz&amp;quot;,
  features = &amp;quot;~/you_file_directory/sample1_name_genes.tsv.gz&amp;quot;,
  cell.column = 1,
  feature.column = 2,
  cell.sep = &amp;quot;\t&amp;quot;,
  feature.sep = &amp;quot;\t&amp;quot;,
  skip.cell = 0,
  skip.feature = 0,
  mtx.transpose = FALSE,
  unique.features = TRUE,
  strip.suffix = FALSE
)
#Create seurat object
sample1 &amp;lt;- CreateSeuratObject(counts = sample1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;type-2-an-.rds-or-.rdata-or-.robj-file&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Type 2: An .RDS or .RData or .Robj file&lt;/h4&gt;
&lt;p&gt;Some very good paper with a large scRNAseq dataset typically provides the R object files to facilitate results reproduction. For example, this &lt;a href=&#34;https://www.nature.com/articles/s41586-018-0590-4&#34;&gt;paper&lt;/a&gt; provided &lt;code&gt;.Robj&lt;/code&gt; files &lt;a href=&#34;https://figshare.com/articles/dataset/Robject_files_for_tissues_processed_by_Seurat/5821263/1&#34;&gt;online&lt;/a&gt; which really reduce our workload for re-analyze their data.&lt;/p&gt;
&lt;p&gt;In this case, we can simply download the &lt;code&gt;.Robj&lt;/code&gt; files of interest and load into R by the Rstudio GUI.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;type-3-a-sample-feature-count-matrix-file&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Type 3: A sample feature-count matrix file&lt;/h4&gt;
&lt;p&gt;The third most common file type is an &lt;code&gt;excel&lt;/code&gt; or &lt;code&gt;.csv&lt;/code&gt; or &lt;code&gt;.tsv&lt;/code&gt; file that has first column as feature (gene) name and the rest column represents the expression level of each gene in each cell. In this case, the method is similar - use &lt;code&gt;read.table()&lt;/code&gt; or similar functions to first read it and then use &lt;code&gt;CreateSeuratObject()&lt;/code&gt; to create the Seurat object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
